For developers - creating custom elements
================================================================================

Extensibility is important
--------------------------------------------------------------------------------
TOX-G has been built to ensure that you can easily add extra elements when you
need to, so that the language can be customized to your needs.

To avoid conflicts, everything is namespaced.  When adding custom elements to
TOX-G, you should use your own namespace for custom elements so you can easily
upgrade TOX-G later without worry of conflicts.


Example usage
--------------------------------------------------------------------------------
If that didn't make sense to you, consider the following code:

<tpl:template name="site:about-us">
	The staff members of this site are:
	<site:username uid="123" linked="true" />
	<site:username uid="456" linked="true" />
	<site:username uid="789" linked="true" />
</tpl:template>

You might make the site:username template completely handled by code.


Monkey see, monkey do
--------------------------------------------------------------------------------
For your own elements, you can and should use ToxgStandardElements as a
template.  It registers a listener for every element it supports, which is then
processed when that element is used.

You can also use an asterisk '*' to listen to all elements or all namespaces.
This can be used to report errors when a misspelled element is used, but then
you'll need to delegate the event to the proper code yourself.

Also note that if you register a xyz:* AND xyz:name, both will be called.  In
fact, if you register xyz:name twice, it will be called twice.


How to emit code to ToxgBuilder
--------------------------------------------------------------------------------
Your event receives a ToxgBuilder object, and you'll want to just call
emitCode() on that.  So, for example:

$builder->emitCode('someFunction();', $token);

Remember to give it the token, so that it can put proper error handling code
into the template, which makes your templates way easier to debug.

Sometimes you might want to send output.  So that output is chained together
efficiently, there's a separate function for this.  Use:

$builder->emitOutputString('some text', $token);

For security reasons, please keep in mind when using the above that your string
is considered "raw", if you use angle brackets, they will be sent directly.  If
you're meaning to output text, remember to escape it.

You may also want to output an expression.  To do this use:

$builder->emitOutputParam('htmlspecialchars(\'some text\')', $token);

This will also be efficiently combined with other output for you.


Expressions
--------------------------------------------------------------------------------
There are a few types of expressions, and you should look at ToxgExpression for
more information.  Each of these are static methods on that class.  You can call
them like this:

$code = ToxgExpression::variable('{$x}', $token);

But, basically, there are the following:

variable
	This is like string or var, except no string - but allows language strings.
	It's not used often.

variableNotLang
	This is like string or var, except no strings.  This is when you need to
	set something (like tpl:set.)

stringWithVars
	This is used for an attribute that might be a variable or may be a string
	with variables in it.  A common example is a template call:

	<my:div class="someclass" />

	You wouldn't want to have to put single quotes around that, right?  In that
	case, you rarely need an expression, so it's just a stringWithVars.

normal
	A normal expression, where you need quotes, +, ., etc. to build it.
	Function calls, etc. can be used here.

boolean
	A boolean expression (one that returns true/false.)  Not very different
	from a normal expression.
